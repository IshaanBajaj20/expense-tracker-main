{"ast":null,"code":"import axios from 'axios';\nimport ExpenseForm from './ExpenseForm.vue';\nexport default {\n  components: {\n    ExpenseForm\n  },\n  data() {\n    return {\n      filters: {\n        category: '',\n        maxAmount: 1000,\n        startDate: '',\n        endDate: ''\n      },\n      amountRange: {\n        min: 0,\n        max: 1000\n      },\n      expenses: [],\n      page: 0,\n      size: 5,\n      totalPages: 0,\n      categories: [\"Travel\", \"Food\", \"Entertainment\", \"Transport\", \"Others\"]\n    };\n  },\n  methods: {\n    formatDate(date) {\n      return new Date(date).toLocaleDateString();\n    },\n    async fetchExpenses() {\n      const auth = localStorage.getItem('auth');\n      if (!auth) {\n        this.$router.push('/');\n        return;\n      }\n      const params = new URLSearchParams({\n        page: this.page,\n        size: this.size,\n        ...this.filters\n      });\n      try {\n        const response = await axios.get(`http://localhost:8080/api/expenses?${params.toString()}`, {\n          headers: {\n            Authorization: `Basic ${auth}`\n          }\n        });\n        this.expenses = response.data.expenses;\n        this.totalPages = response.data.totalPages;\n      } catch (error) {\n        this.$router.push('/');\n      }\n    },\n    resetFilters() {\n      this.filters = {\n        category: '',\n        maxAmount: 1000,\n        startDate: '',\n        endDate: ''\n      };\n      this.page = 0;\n      this.fetchExpenses();\n    },\n    nextPage() {\n      if (this.page + 1 < this.totalPages) {\n        this.page++;\n        this.fetchExpenses();\n      }\n    },\n    prevPage() {\n      if (this.page > 0) {\n        this.page--;\n        this.fetchExpenses();\n      }\n    },\n    logout() {\n      localStorage.removeItem('auth');\n      this.$router.push('/');\n    }\n  },\n  mounted() {\n    this.fetchExpenses();\n  }\n};","map":{"version":3,"names":["axios","ExpenseForm","components","data","filters","category","maxAmount","startDate","endDate","amountRange","min","max","expenses","page","size","totalPages","categories","methods","formatDate","date","Date","toLocaleDateString","fetchExpenses","auth","localStorage","getItem","$router","push","params","URLSearchParams","response","get","toString","headers","Authorization","error","resetFilters","nextPage","prevPage","logout","removeItem","mounted"],"sources":["src/components/ExpenseList.vue"],"sourcesContent":["<template>\n  <div class=\"app-bg\">\n    <div class=\"container responsive-layout\">\n      <!-- Left: Add Expense Form -->\n      <div class=\"left-pane\">\n        <h2>Add Expense</h2>\n        <expense-form @expense-added=\"fetchExpenses\" />\n      </div>\n\n      <!-- Right: Filter and Table -->\n      <div class=\"right-pane\">\n        <!-- Filter Form -->\n        <form @submit.prevent=\"fetchExpenses\" class=\"filter-form\">\n          <div>\n            <label>Category:</label>\n            <select v-model=\"filters.category\">\n              <option value=\"\">All</option>\n              <option v-for=\"cat in categories\" :key=\"cat\" :value=\"cat\">{{ cat }}</option>\n            </select>\n          </div>\n          <div class=\"slider-container\">\n            <label>Max Amount: ${{ filters.maxAmount }}</label>\n            <input\n              type=\"range\"\n              v-model.number=\"filters.maxAmount\"\n              :min=\"amountRange.min\"\n              :max=\"amountRange.max\"\n              step=\"1\"\n            />\n          </div>\n          <div>\n            <label>Start Date:</label>\n            <input v-model=\"filters.startDate\" type=\"date\" />\n          </div>\n          <div>\n            <label>End Date:</label>\n            <input v-model=\"filters.endDate\" type=\"date\" />\n          </div>\n          <div class=\"full-width\">\n            <button type=\"submit\">Apply Filters</button>\n            <button type=\"button\" @click=\"resetFilters\" class=\"reset-btn\">Reset Filters</button>\n          </div>\n        </form>\n\n        <!-- Expense List -->\n        <table v-if=\"expenses.length > 0\">\n          <thead>\n            <tr>\n              <th>Description</th>\n              <th>Category</th>\n              <th>Amount</th>\n              <th>Date</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"expense in expenses\" :key=\"expense.id\">\n              <td>{{ expense.description }}</td>\n              <td>{{ expense.category }}</td>\n              <td>${{ expense.amount.toFixed(2) }}</td>\n              <td>{{ formatDate(expense.date) }}</td>\n            </tr>\n          </tbody>\n        </table>\n        <p v-else>No results found.</p>\n\n        <!-- Pagination -->\n        <div class=\"pagination\">\n          <button @click=\"prevPage\" :disabled=\"page === 0\">Previous</button>\n          <span>Page {{ page + 1 }} of {{ totalPages }}</span>\n          <button @click=\"nextPage\" :disabled=\"page + 1 >= totalPages\">Next</button>\n        </div>\n\n        <button @click=\"logout\" class=\"logout-btn\">Logout</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport ExpenseForm from './ExpenseForm.vue';\n\nexport default {\n  components: { ExpenseForm },\n  data() {\n    return {\n      filters: {\n        category: '',\n        maxAmount: 1000,\n        startDate: '',\n        endDate: ''\n      },\n      amountRange: {\n        min: 0,\n        max: 1000\n      },\n      expenses: [],\n      page: 0,\n      size: 5,\n      totalPages: 0,\n      categories: [\"Travel\", \"Food\", \"Entertainment\", \"Transport\", \"Others\"]\n    };\n  },\n  methods: {\n    formatDate(date) {\n      return new Date(date).toLocaleDateString();\n    },\n    async fetchExpenses() {\n      const auth = localStorage.getItem('auth');\n      if (!auth) {\n        this.$router.push('/');\n        return;\n      }\n      const params = new URLSearchParams({\n        page: this.page,\n        size: this.size,\n        ...this.filters\n      });\n      try {\n        const response = await axios.get(`http://localhost:8080/api/expenses?${params.toString()}`, {\n          headers: { Authorization: `Basic ${auth}` }\n        });\n        this.expenses = response.data.expenses;\n        this.totalPages = response.data.totalPages;\n      } catch (error) {\n        this.$router.push('/');\n      }\n    },\n    resetFilters() {\n      this.filters = {\n        category: '',\n        maxAmount: 1000,\n        startDate: '',\n        endDate: ''\n      };\n      this.page = 0;\n      this.fetchExpenses();\n    },\n    nextPage() {\n      if (this.page + 1 < this.totalPages) {\n        this.page++;\n        this.fetchExpenses();\n      }\n    },\n    prevPage() {\n      if (this.page > 0) {\n        this.page--;\n        this.fetchExpenses();\n      }\n    },\n    logout() {\n      localStorage.removeItem('auth');\n      this.$router.push('/');\n    }\n  },\n  mounted() {\n    this.fetchExpenses();\n  }\n};\n</script>\n\n<style scoped>\n.app-bg {\n  background-color: #f2f2f2;\n  min-height: 100vh;\n  padding: 40px 0;\n}\n\n.container {\n  max-width: 1200px;\n  height: 100vh\n  margin: 0 auto;\n  padding: 20px;\n  font-family: Arial, sans-serif;\n  background-color: #fff;\n  border-radius: 10px;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n}\n\n.left-pane,\n.right-pane {\n  flex: 1;\n  min-width: 300px;\n}\n\nform {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 16px;\n  margin-bottom: 20px;\n}\nform div {\n  display: flex;\n  flex-direction: column;\n}\n.full-width {\n  grid-column: span 2;\n  display: flex;\n  gap: 10px;\n}\n\nlabel {\n  margin-bottom: 6px;\n  font-weight: bold;\n}\n\ninput,\nselect {\n  padding: 8px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\n.slider-container input[type=range] {\n  margin: 5px 0;\n}\n\nbutton {\n  padding: 10px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-weight: bold;\n  cursor: pointer;\n}\nbutton:disabled {\n  background-color: #cccccc;\n}\n\n.reset-btn {\n  background-color: #6c757d;\n}\n\n.logout-btn {\n  margin-top: 20px;\n  background-color: #dc3545;\n}\n\n.pagination {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 20px;\n}\n\n.table-container,\ntable {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 10px;\n}\nth,\ntd {\n  padding: 10px;\n  border-bottom: 1px solid #ccc;\n  text-align: left;\n}\nth {\n  background-color: #f2f2f2;\n}\n\n.form-section {\n  margin-bottom: 30px;\n}\n\n@media (max-width: 768px) {\n  .container {\n    flex-direction: column;\n  }\n}\n</style>\n"],"mappings":"AA+EA,OAAAA,KAAA;AACA,OAAAC,WAAA;AAEA;EACAC,UAAA;IAAAD;EAAA;EACAE,KAAA;IACA;MACAC,OAAA;QACAC,QAAA;QACAC,SAAA;QACAC,SAAA;QACAC,OAAA;MACA;MACAC,WAAA;QACAC,GAAA;QACAC,GAAA;MACA;MACAC,QAAA;MACAC,IAAA;MACAC,IAAA;MACAC,UAAA;MACAC,UAAA;IACA;EACA;EACAC,OAAA;IACAC,WAAAC,IAAA;MACA,WAAAC,IAAA,CAAAD,IAAA,EAAAE,kBAAA;IACA;IACA,MAAAC,cAAA;MACA,MAAAC,IAAA,GAAAC,YAAA,CAAAC,OAAA;MACA,KAAAF,IAAA;QACA,KAAAG,OAAA,CAAAC,IAAA;QACA;MACA;MACA,MAAAC,MAAA,OAAAC,eAAA;QACAhB,IAAA,OAAAA,IAAA;QACAC,IAAA,OAAAA,IAAA;QACA,QAAAV;MACA;MACA;QACA,MAAA0B,QAAA,SAAA9B,KAAA,CAAA+B,GAAA,uCAAAH,MAAA,CAAAI,QAAA;UACAC,OAAA;YAAAC,aAAA,WAAAX,IAAA;UAAA;QACA;QACA,KAAAX,QAAA,GAAAkB,QAAA,CAAA3B,IAAA,CAAAS,QAAA;QACA,KAAAG,UAAA,GAAAe,QAAA,CAAA3B,IAAA,CAAAY,UAAA;MACA,SAAAoB,KAAA;QACA,KAAAT,OAAA,CAAAC,IAAA;MACA;IACA;IACAS,aAAA;MACA,KAAAhC,OAAA;QACAC,QAAA;QACAC,SAAA;QACAC,SAAA;QACAC,OAAA;MACA;MACA,KAAAK,IAAA;MACA,KAAAS,aAAA;IACA;IACAe,SAAA;MACA,SAAAxB,IAAA,YAAAE,UAAA;QACA,KAAAF,IAAA;QACA,KAAAS,aAAA;MACA;IACA;IACAgB,SAAA;MACA,SAAAzB,IAAA;QACA,KAAAA,IAAA;QACA,KAAAS,aAAA;MACA;IACA;IACAiB,OAAA;MACAf,YAAA,CAAAgB,UAAA;MACA,KAAAd,OAAA,CAAAC,IAAA;IACA;EACA;EACAc,QAAA;IACA,KAAAnB,aAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}